
Comparator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000002b0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002fb  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000167  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c2  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d5  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a2  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_2>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup>:
		}  
    }
}
void setup(void)
{
	DDRD = 0b00010100;//PD2 PWM signal PD4 IR LED.
  a4:	84 e1       	ldi	r24, 0x14	; 20
  a6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  a8:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0b10000000;
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <setup+0x10>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <setup+0x1a>
  be:	00 00       	nop
	//PORTC = 0b10000000;
	
	_delay_ms(1000);
	////Timer 1
	TCCR1A |= (1<<COM1A1)|(1<<WGM11); // Fast PWM clear on match set at top
  c0:	e0 e8       	ldi	r30, 0x80	; 128
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 68       	ori	r24, 0x82	; 130
  c8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<CS10)|(1<<WGM12);  // Fast PWM 16MHz
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	89 61       	ori	r24, 0x19	; 25
  d2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
  d4:	ef e6       	ldi	r30, 0x6F	; 111
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	
	ICR1 = 319;
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	90 93 87 00 	sts	0x0087, r25
  e6:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 31; // 2us on 18us off.
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 89 00 	sts	0x0089, r25
  f2:	80 93 88 00 	sts	0x0088, r24
	sei();
  f6:	78 94       	sei
 

	
	//Comparator setup
	ADCSRA &=~(1<<ADEN); // Disable ADC
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	80 83       	st	Z, r24
	AC0CON |= (1<<AC0EN)|(1<<AC0M2)|(1<<AC0M1);//Analog comparator negative input (ACMPM pin);Analog Comparator 0 Enable
 102:	e4 e9       	ldi	r30, 0x94	; 148
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	86 68       	ori	r24, 0x86	; 134
 10a:	80 83       	st	Z, r24
	
	AC1CON |=  (1<<AC1EN)|(1<<AC1IE)|(1<<AC1M2)|(1<<AC1M1)|(1<<AC1IS1); // enable interrupt on falling 
 10c:	e5 e9       	ldi	r30, 0x95	; 149
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	86 6e       	ori	r24, 0xE6	; 230
 114:	80 83       	st	Z, r24
	
	ACSR &=(~(1<<AC0O))|(~(1<<AC1O)) ;// set ACO 0
 116:	80 b7       	in	r24, 0x30	; 48
 118:	80 bf       	out	0x30, r24	; 48
	
	//_delay_us(1);
	a = 0;
 11a:	10 92 07 01 	sts	0x0107, r1
 11e:	10 92 06 01 	sts	0x0106, r1
 122:	08 95       	ret

00000124 <main>:

int abc;   

int main(void)
{
	setup();
 124:	0e 94 52 00 	call	0xa4	; 0xa4 <setup>
			OCR1A = 31; // 2us on 18us off.
		}
		
		else if (a>=400 && bit_is_clear(PIND,PIND6))
		{
			TCCR1A = 0x00;
 128:	a0 e8       	ldi	r26, 0x80	; 128
 12a:	b0 e0       	ldi	r27, 0x00	; 0
			TCCR1B = 0x00;
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
			flag = 1;
 130:	ff 24       	eor	r15, r15
 132:	f3 94       	inc	r15
			//Turn the timer back on 
			_delay_ms(1000);
			a=0;
			TCCR1A |= (1<<COM1A1)|(1<<WGM11); // Fast PWM clear on match set at top
			TCCR1B |= (1<<WGM13)|(1<<CS10)|(1<<WGM12);  // Fast PWM 16MHz
			TIMSK1 |= (1<<OCIE1A);
 134:	0f 2e       	mov	r0, r31
 136:	ff e6       	ldi	r31, 0x6F	; 111
 138:	cf 2e       	mov	r12, r31
 13a:	d1 2c       	mov	r13, r1
 13c:	f0 2d       	mov	r31, r0
			ICR1 = 319;
 13e:	06 e8       	ldi	r16, 0x86	; 134
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	6f e3       	ldi	r22, 0x3F	; 63
 144:	71 e0       	ldi	r23, 0x01	; 1
			OCR1A = 31; // 2us on 18us off.
 146:	48 e8       	ldi	r20, 0x88	; 136
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	0f 2e       	mov	r0, r31
 14c:	ff e1       	ldi	r31, 0x1F	; 31
 14e:	af 2e       	mov	r10, r31
 150:	b1 2c       	mov	r11, r1
 152:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		//ledOn;

		if (bit_is_set(PIND,PIND6)) // REACH 100v
 154:	4e 9b       	sbis	0x09, 6	; 9
 156:	35 c0       	rjmp	.+106    	; 0x1c2 <main+0x9e>
		{	
			flag = 0;
 158:	10 92 03 01 	sts	0x0103, r1
			//TCCR1A = 0x00;
			//TCCR1B = 0x00;
			gateOff;
 15c:	5a 98       	cbi	0x0b, 2	; 11
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x40>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x4a>
 16e:	00 00       	nop
			//ledOn;
			_delay_ms(50);
			IRledon;   //Discharge SCR on.
 170:	5c 9a       	sbi	0x0b, 4	; 11
 172:	cf ef       	ldi	r28, 0xFF	; 255
 174:	d0 e7       	ldi	r29, 0x70	; 112
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	c1 50       	subi	r28, 0x01	; 1
 17a:	d0 40       	sbci	r29, 0x00	; 0
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x54>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x5e>
 182:	00 00       	nop
			_delay_ms(50);
			IRledoff;	
 184:	5c 98       	cbi	0x0b, 4	; 11
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	93 ed       	ldi	r25, 0xD3	; 211
 18a:	c0 e3       	ldi	r28, 0x30	; 48
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	c0 40       	sbci	r28, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x72>
 196:	00 00       	nop
			//Turn the timer back on 
			_delay_ms(1000);
			a=0;
 198:	10 92 07 01 	sts	0x0107, r1
 19c:	10 92 06 01 	sts	0x0106, r1
			TCCR1A |= (1<<COM1A1)|(1<<WGM11); // Fast PWM clear on match set at top
 1a0:	8c 91       	ld	r24, X
 1a2:	82 68       	ori	r24, 0x82	; 130
 1a4:	8c 93       	st	X, r24
			TCCR1B |= (1<<WGM13)|(1<<CS10)|(1<<WGM12);  // Fast PWM 16MHz
 1a6:	80 81       	ld	r24, Z
 1a8:	89 61       	ori	r24, 0x19	; 25
 1aa:	80 83       	st	Z, r24
			TIMSK1 |= (1<<OCIE1A);
 1ac:	e6 01       	movw	r28, r12
 1ae:	88 81       	ld	r24, Y
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	88 83       	st	Y, r24
			ICR1 = 319;
 1b4:	e8 01       	movw	r28, r16
 1b6:	79 83       	std	Y+1, r23	; 0x01
 1b8:	68 83       	st	Y, r22
			OCR1A = 31; // 2us on 18us off.
 1ba:	ea 01       	movw	r28, r20
 1bc:	b9 82       	std	Y+1, r11	; 0x01
 1be:	a8 82       	st	Y, r10
 1c0:	c9 cf       	rjmp	.-110    	; 0x154 <main+0x30>
		}
		
		else if (a>=400 && bit_is_clear(PIND,PIND6))
 1c2:	80 91 06 01 	lds	r24, 0x0106
 1c6:	90 91 07 01 	lds	r25, 0x0107
 1ca:	80 39       	cpi	r24, 0x90	; 144
 1cc:	91 40       	sbci	r25, 0x01	; 1
 1ce:	14 f2       	brlt	.-124    	; 0x154 <main+0x30>
 1d0:	4e 99       	sbic	0x09, 6	; 9
 1d2:	c0 cf       	rjmp	.-128    	; 0x154 <main+0x30>
		{
			TCCR1A = 0x00;
 1d4:	1c 92       	st	X, r1
			TCCR1B = 0x00;
 1d6:	10 82       	st	Z, r1
			flag = 1;
 1d8:	f0 92 03 01 	sts	0x0103, r15
 1dc:	bb cf       	rjmp	.-138    	; 0x154 <main+0x30>

000001de <__vector_2>:
	
	//_delay_us(1);
	a = 0;
}
ISR(ANACOMP1_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
	
	if (flag==1)
 1ea:	80 91 03 01 	lds	r24, 0x0103
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	31 f4       	brne	.+12     	; 0x1fe <__vector_2+0x20>
	{
		gateOn;
 1f2:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <__vector_2+0x18>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__vector_2+0x1e>
		_delay_us(2);
		gateOff;
 1fc:	5a 98       	cbi	0x0b, 2	; 11
	}
	
	
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
	a++;
 218:	80 91 06 01 	lds	r24, 0x0106
 21c:	90 91 07 01 	lds	r25, 0x0107
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 07 01 	sts	0x0107, r25
 226:	80 93 06 01 	sts	0x0106, r24
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
