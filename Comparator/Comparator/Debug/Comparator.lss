
Comparator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  000002aa  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ef  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000167  00000000  00000000  00000601  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001be  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001da  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e4  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_2>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a7 30       	cpi	r26, 0x07	; 7
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9c:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup>:
}
void setup(void)
{
	
	
	DDRD = 0b00010100;//PD2 PWM signal PD4 IR LED.
  a4:	84 e1       	ldi	r24, 0x14	; 20
  a6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  a8:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0b10000000;
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <setup+0x10>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <setup+0x1a>
  be:	00 00       	nop
	//PORTC = 0b10000000;
	
	_delay_ms(1000);
	////Timer 1
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0); // Set OC1A/OC1B on compare match when upcounting.Clear OC1A/OC1B on compare match when down counting.
  c0:	e0 e8       	ldi	r30, 0x80	; 128
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 6c       	ori	r24, 0xC0	; 192
  c8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<CS10);  // PWM, phase and frequency correct. 8MHz.
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 61       	ori	r24, 0x11	; 17
  d2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
  d4:	ef e6       	ldi	r30, 0x6F	; 111
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	
	ICR1 = 160;
  de:	80 ea       	ldi	r24, 0xA0	; 160
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 87 00 	sts	0x0087, r25
  e6:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 144; // 2us on.48us off.
  ea:	80 e9       	ldi	r24, 0x90	; 144
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 89 00 	sts	0x0089, r25
  f2:	80 93 88 00 	sts	0x0088, r24
	sei();
  f6:	78 94       	sei

	
	//Comparator setup
	ADCSRA &=~(1<<ADEN); // Disable ADC
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	80 83       	st	Z, r24
	AC0CON |= (1<<AC0EN)|(1<<AC0M2)|(1<<AC0M1);//Analog comparator negative input (ACMPM pin);Analog Comparator 0 Enable
 102:	e4 e9       	ldi	r30, 0x94	; 148
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	86 68       	ori	r24, 0x86	; 134
 10a:	80 83       	st	Z, r24
	
	AC1CON |=  (1<<AC1EN)|(1<<AC1IE)|(1<<AC1M2)|(1<<AC1M1)|(1<<AC1IS1); // enable interrupt on falling 
 10c:	e5 e9       	ldi	r30, 0x95	; 149
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	86 6e       	ori	r24, 0xE6	; 230
 114:	80 83       	st	Z, r24
	
	ACSR &=(~(1<<AC0O))|(~(1<<AC1O)) ;// set ACO 0
 116:	80 b7       	in	r24, 0x30	; 48
 118:	80 bf       	out	0x30, r24	; 48
	
	//_delay_us(1);
	a = 0;
 11a:	10 92 06 01 	sts	0x0106, r1
 11e:	10 92 05 01 	sts	0x0105, r1
 122:	08 95       	ret

00000124 <main>:

int abc;

int main(void)
{
	setup();
 124:	0e 94 52 00 	call	0xa4	; 0xa4 <setup>
			IRledon;   //Discharge SCR on.
			_delay_ms(50);
			IRledoff;	
			//Turn the timer back on 
			_delay_ms(1000);
			TCCR1A |= (1<<COM1A1)|(1<<COM1A0); // Set OC1A/OC1B on compare match when upcounting.Clear OC1A/OC1B on compare match when down counting.
 128:	c0 e8       	ldi	r28, 0x80	; 128
 12a:	d0 e0       	ldi	r29, 0x00	; 0
			TCCR1B |= (1<<WGM13)|(1<<CS10);
 12c:	a1 e8       	ldi	r26, 0x81	; 129
 12e:	b0 e0       	ldi	r27, 0x00	; 0
			TIMSK1 |= (1<<OCIE1A);
 130:	0f 2e       	mov	r0, r31
 132:	ff e6       	ldi	r31, 0x6F	; 111
 134:	ef 2e       	mov	r14, r31
 136:	f1 2c       	mov	r15, r1
 138:	f0 2d       	mov	r31, r0
			ICR1 = 160;
 13a:	66 e8       	ldi	r22, 0x86	; 134
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	40 ea       	ldi	r20, 0xA0	; 160
 140:	50 e0       	ldi	r21, 0x00	; 0
			OCR1A = 144;
 142:	28 e8       	ldi	r18, 0x88	; 136
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	0f 2e       	mov	r0, r31
 148:	f0 e9       	ldi	r31, 0x90	; 144
 14a:	cf 2e       	mov	r12, r31
 14c:	d1 2c       	mov	r13, r1
 14e:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		//ledOn;

		if (bit_is_set(PIND,PIND6)) // REACH 100v
 150:	4e 9b       	sbis	0x09, 6	; 9
 152:	fe cf       	rjmp	.-4      	; 0x150 <main+0x2c>
		{
			a=0;	
 154:	10 92 06 01 	sts	0x0106, r1
 158:	10 92 05 01 	sts	0x0105, r1
			//count = 0;
			//abc = 0;
			ledOn;
 15c:	47 9a       	sbi	0x08, 7	; 8
			gateOff;
 15e:	5a 98       	cbi	0x0b, 2	; 11
 160:	0f ef       	ldi	r16, 0xFF	; 255
 162:	10 e7       	ldi	r17, 0x70	; 112
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	01 50       	subi	r16, 0x01	; 1
 168:	10 40       	sbci	r17, 0x00	; 0
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x42>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x4c>
 170:	00 00       	nop
			//TCCR1B = 0x00;
			_delay_ms(50);
			IRledon;   //Discharge SCR on.
 172:	5c 9a       	sbi	0x0b, 4	; 11
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	e0 e7       	ldi	r30, 0x70	; 112
 178:	f2 e0       	ldi	r31, 0x02	; 2
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	e0 40       	sbci	r30, 0x00	; 0
 17e:	f0 40       	sbci	r31, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x56>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x60>
 184:	00 00       	nop
			_delay_ms(50);
			IRledoff;	
 186:	5c 98       	cbi	0x0b, 4	; 11
 188:	0f ef       	ldi	r16, 0xFF	; 255
 18a:	13 ed       	ldi	r17, 0xD3	; 211
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	01 50       	subi	r16, 0x01	; 1
 190:	10 40       	sbci	r17, 0x00	; 0
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x6a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x74>
 198:	00 00       	nop
			//Turn the timer back on 
			_delay_ms(1000);
			TCCR1A |= (1<<COM1A1)|(1<<COM1A0); // Set OC1A/OC1B on compare match when upcounting.Clear OC1A/OC1B on compare match when down counting.
 19a:	18 81       	ld	r17, Y
 19c:	10 6c       	ori	r17, 0xC0	; 192
 19e:	18 83       	st	Y, r17
			TCCR1B |= (1<<WGM13)|(1<<CS10);
 1a0:	1c 91       	ld	r17, X
 1a2:	11 61       	ori	r17, 0x11	; 17
 1a4:	1c 93       	st	X, r17
			TIMSK1 |= (1<<OCIE1A);
 1a6:	f7 01       	movw	r30, r14
 1a8:	10 81       	ld	r17, Z
 1aa:	12 60       	ori	r17, 0x02	; 2
 1ac:	10 83       	st	Z, r17
			ICR1 = 160;
 1ae:	fb 01       	movw	r30, r22
 1b0:	51 83       	std	Z+1, r21	; 0x01
 1b2:	40 83       	st	Z, r20
			OCR1A = 144;
 1b4:	f9 01       	movw	r30, r18
 1b6:	d1 82       	std	Z+1, r13	; 0x01
 1b8:	c0 82       	st	Z, r12
 1ba:	ca cf       	rjmp	.-108    	; 0x150 <main+0x2c>

000001bc <__vector_2>:
	
	//_delay_us(1);
	a = 0;
}
ISR(ANACOMP1_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
		//count++;
		if (a >= 1000 && bit_is_clear(PIND,PIND6))
 1cc:	80 91 05 01 	lds	r24, 0x0105
 1d0:	90 91 06 01 	lds	r25, 0x0106
 1d4:	88 3e       	cpi	r24, 0xE8	; 232
 1d6:	93 40       	sbci	r25, 0x03	; 3
 1d8:	6c f0       	brlt	.+26     	; 0x1f4 <__vector_2+0x38>
 1da:	4e 99       	sbic	0x09, 6	; 9
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <__vector_2+0x38>
		{
			//count = 0;
			TCCR1A = 0x00;
 1de:	10 92 80 00 	sts	0x0080, r1
			TCCR1B = 0x00;
 1e2:	10 92 81 00 	sts	0x0081, r1
			gateOn;
 1e6:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	85 e1       	ldi	r24, 0x15	; 21
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <__vector_2+0x2e>
 1ee:	00 00       	nop
			_delay_us(4);
			gateOff;
 1f0:	5a 98       	cbi	0x0b, 2	; 11
			ledOn;
 1f2:	47 9a       	sbi	0x08, 7	; 8
		}
		
	
}
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_12>:



ISR(TIMER1_COMPA_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	a++;
 212:	80 91 05 01 	lds	r24, 0x0105
 216:	90 91 06 01 	lds	r25, 0x0106
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 06 01 	sts	0x0106, r25
 220:	80 93 05 01 	sts	0x0105, r24
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
